plugins {
    id 'java'
    id 'application'
    id "name.remal.check-updates" version "1.0.113"
    id 'org.sonarqube' version '2.6.2' apply false
    id 'org.beryx.runtime' version '1.1.5' apply false
}

repositories {
    mavenCentral()
}

if (System.properties['sonar.login'] != null) {
    apply plugin: 'jacoco'
    apply plugin: 'org.sonarqube'
    jacoco {
        toolVersion = "0.8.2"
    }
    // Temporarilly disable Sonar Analysis until this issue is fixed: https://github.com/spotbugs/sonar-findbugs/issues/293
    // build.finalizedBy('sonarqube')
}

dependencies {
    implementation 'com.sparkjava:spark-core:2.8.0'
    implementation 'org.slf4j:slf4j-simple:1.7.25'

    implementation "com.squareup.okhttp3:okhttp:3.13.1"
    implementation 'com.github.spullara.mustache.java:compiler:0.9.6'
    implementation 'org.apache.commons:commons-text:1.6'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.9.8'

    implementation "org.projectlombok:lombok:1.18.6"
    implementation 'io.vavr:vavr:0.10.0'

    implementation 'com.google.code.gson:gson:2.8.5'
    implementation 'com.google.guava:guava:27.0.1-jre'
    implementation 'org.projectlombok:lombok:1.16.18'

    implementation 'javax.mail:mail:1.5.0-b01'

    annotationProcessor "org.projectlombok:lombok:1.18.6"
    annotationProcessor 'io.vavr:vavr:0.10.0'

    testImplementation 'org.testng:testng:6.14.3'
}

group = 'dk.acto.web'
version = '1.0-SNAPSHOT'
sourceCompatibility = '11'
targetCompatibility = '11'
mainClassName = 'dk.acto.web.Main'

test {
    useTestNG()
}

distributions {
    main {
        contents {
            filesMatching("**/bootstrap") {
                expand (["executeMe": "bin/" + project.name,
                         "ltr":"\$LAMBDA_TASK_ROOT"
                ])
            }
            into "/"
        }
    }
}

//runtime {
//    options = ['--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages']
//    modules = ["java.base", "java.logging"]
//}

task prepareLambda(type: Zip) {
    archiveClassifier = "lambda"
    from("$buildDir/image") {
        into "/"
    }
}

prepareLambda.dependsOn("runtime")
